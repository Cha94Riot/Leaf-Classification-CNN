#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 03, 2019 10:13:30 AM BST  platform: Windows NT

import sys
import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import TestGUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    TestGUI_support.set_Tk_var()
    TestGUI_support.loadModel()
    top = Toplevel1 (root)
    TestGUI_support.init(root, top)
    root.mainloop()

w = None

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1280x720+324+253")
        top.title("New Toplevel")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=0.207, relwidth=0.999)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(width=1268)

        self.selectImageButton = tk.Button(self.Frame1)
        self.selectImageButton.place(relx=0.008, rely=0.067, height=30, width=128)
        self.selectImageButton.configure(command=TestGUI_support.loadImage)
        self.selectImageButton.configure(pady="0")
        self.selectImageButton.configure(text='''Select Image''')

        self.runModelButton = tk.Button(self.Frame1)
        self.runModelButton.place(relx=0.008, rely=0.336, height=30, width=128)
        self.runModelButton.configure(command=TestGUI_support.runModel)
        self.runModelButton.configure(pady="0")
        self.runModelButton.configure(text='''Run Model''')

        self.convOutputCheckbox = tk.Checkbutton(self.Frame1)
        self.convOutputCheckbox.place(relx=0.117, rely=0.336, relheight=0.201, relwidth=0.225)
        self.convOutputCheckbox.configure(anchor='w')
        self.convOutputCheckbox.configure(justify='left')
        self.convOutputCheckbox.configure(text='''Show Convolution Outputs''')
        self.convOutputCheckbox.configure(variable=TestGUI_support.convOutChecked)

        self.imagePreviewFrame = tk.LabelFrame(self.Frame1)
        self.imagePreviewFrame.place(relx=0.829, rely=0.0, relheight=1.0, relwidth=0.172)
        self.imagePreviewFrame.configure(relief='groove')
        self.imagePreviewFrame.configure(width=220)

        self.imagePreview = tk.Label(self.imagePreviewFrame)
        self.imagePreview.place(relx=0.023, rely=0.02, height=138, width=210, bordermode='ignore')

        self.imagePath = tk.Label(self.Frame1)
        self.imagePath.place(relx=0.117, rely=0.067, height=31, width=727)
        self.imagePath.configure(anchor='w')
        self.imagePath.configure(text='''Selected Image Path''')
        self.imagePath.configure(width=727)

        self.imagePreviewText = tk.Label(self.Frame1)
        self.imagePreviewText.place(relx=0.765, rely=0.067, height=31, width=79)
        self.imagePreviewText.configure(text='''Image Preview:''')

        self.error_box = tk.Label(self.Frame1)
        self.error_box.place(relx=0.016, rely=0.671, height=31, width=1007)
        self.error_box.configure(anchor='w')
        self.error_box.configure(width=1007)


        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.0, rely=0.208, relheight=0.792, relwidth=0.999)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(width=1268)

        self.classOutputs = tk.Label(self.Frame2)
        self.classOutputs.place(relx=0.837, rely=0.018, height=551, width=207)
        self.classOutputs.configure(text='''PLACEHOLDER TOP 5''')

        self.convOutputTabs = ttk.Notebook(self.Frame2)
        self.convOutputTabs.place(relx=0.0, rely=0.0, relheight=0.991
                , relwidth=0.832)
        self.convOutputTabs.configure(width=1064)

        self.convOutputTabs_t0 = tk.Frame(self.convOutputTabs)
        self.convOutputTabs.add(self.convOutputTabs_t0, padding=3)
        self.convOutputTabs.tab(0, text="Conv-1", compound="left", underline="-1")
        self.tab0label = tk.Label(self.convOutputTabs_t0)
        self.tab0label.place(relx=0.0, rely=0.0, height=531, width=1057)
        self.tab0label.configure(width=1057)

        self.convOutputTabs_t1 = tk.Frame(self.convOutputTabs)
        self.convOutputTabs.add(self.convOutputTabs_t1, padding=3)
        self.convOutputTabs.tab(1, text="Conv-2", compound="left", underline="-1")
        self.tab1label = tk.Label(self.convOutputTabs_t1)
        self.tab1label.place(relx=0.0, rely=0.0, height=531, width=1057)
        self.tab1label.configure(width=1057)

        self.convOutputTabs_t2 = tk.Frame(self.convOutputTabs)
        self.convOutputTabs.add(self.convOutputTabs_t2, padding=3)
        self.convOutputTabs.tab(2, text="Conv-3", compound="none", underline="-1")
        self.tab2label = tk.Label(self.convOutputTabs_t2)
        self.tab2label.place(relx=0.0, rely=0.0, height=531, width=1057)
        self.tab2label.configure(width=1057)

        self.convOutputTabs_t3 = tk.Frame(self.convOutputTabs)
        self.convOutputTabs.add(self.convOutputTabs_t3, padding=3)
        self.convOutputTabs.tab(3, text="Conv-4", compound="none", underline="-1")
        self.tab3label = tk.Label(self.convOutputTabs_t3)
        self.tab3label.place(relx=0.0, rely=0.0, height=531, width=1057)
        self.tab3label.configure(width=1057)

        self.convOutputTabs_t4 = tk.Frame(self.convOutputTabs)
        self.convOutputTabs.add(self.convOutputTabs_t4, padding=3)
        self.convOutputTabs.tab(4, text="Conv-5", compound="none", underline="-1")
        self.tab4label = tk.Label(self.convOutputTabs_t4)
        self.tab4label.place(relx=0.0, rely=0.0, height=531, width=1057)
        self.tab4label.configure(width=1057)





if __name__ == '__main__':
    vp_start_gui()





